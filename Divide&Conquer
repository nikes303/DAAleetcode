A)Maximum subarray(Medium)
Given an integer array nums, find the subarray with the largest sum, and return its sum.

class Solution:
    def maxSubArray(self, nums):
        def max_crossing_subarray(nums, left, right, mid):
            left_sum = float('-inf')
            current_sum = 0
            for i in range(mid, left - 1, -1):
                current_sum += nums[i]
                if current_sum > left_sum:
                    left_sum = current_sum

            right_sum = float('-inf')
            current_sum = 0
            for i in range(mid + 1, right + 1):
                current_sum += nums[i]
                if current_sum > right_sum:
                    right_sum = current_sum

            return left_sum + right_sum

        def max_subarray(nums, left, right):
            if left == right:
                return nums[left]

            mid = (left + right) // 2

            left_sum = max_subarray(nums, left, mid)
            right_sum = max_subarray(nums, mid + 1, right)
            cross_sum = max_crossing_subarray(nums, left, right, mid)

            return max(left_sum, right_sum, cross_sum)

        return max_subarray(nums, 0, len(nums) - 1)
OUTPUT:
Input
nums =
[-2,1,-3,4,-1,2,1,-5,4]
Output
6
Expected
6

B)Pow(x,n) (Medium)
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

class Solution(object):
    def myPow(self, x, n):
        if n == 0:
            return 1.0
        if n == 1:
            return x
        if n < 0:
            x = 1 / x
            n = -n
        result = 1.0
        while n > 0:
            if n % 2 == 1:
                result *= x
            x *= x
            n //= 2
        return result
OUTPUT:
Input
x =
2.00000
n =
10
Output
1024.00000
Expected
1024.00000
