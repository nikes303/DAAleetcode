A)3Sum Closet (Medium)
Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.

class Solution(object):
    def threeSumClosest(self, nums, target):
        nums.sort()
        closest_sum = float('inf')
        for i in range(len(nums) - 2):
            left, right = i + 1, len(nums) - 1
            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]
                if current_sum == target:
                    return current_sum
                if abs(current_sum - target) < abs(closest_sum - target):
                    closest_sum = current_sum
                if current_sum < target:
                    left += 1
                else:
                    right -= 1
        return closest_sum

OUTPUT:
nums =
[-1,2,1,-4]
target =
1
Output
2
Expected
2

B)Subsets (Medium)
Given an integer array nums of unique elements, return all possible subsets
(the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

class Solution(object):
    def subsets(self, nums):
        result = []
        n = len(nums)
        for i in range(2**n):
            subset = []
            for j in range(n):
                if (i & (1 << j)) > 0:
                    subset.append(nums[j])
            result.append(subset)
        return result

OUTPUT:
nums =
[1,2,3]
Output
[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Expected
[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]




