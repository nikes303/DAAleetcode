A)Candy (Hard)
There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

class Solution:
    def candy(self, ratings):
        n = len(ratings)
        candies = [1] * n
        
        # First pass: left to right
        for i in range(1, n):
            if ratings[i] > ratings[i - 1]:
                candies[i] = candies[i - 1] + 1
        
        # Second pass: right to left
        for i in range(n - 2, -1, -1):
            if ratings[i] > ratings[i + 1]:
                candies[i] = max(candies[i], candies[i + 1] + 1)
        
        return sum(candies)
OUTPUT:
Input
ratings =
[1,0,2]
Output
5
Expected
5

B)Minimum arrows to burst ballons (Medium)
There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where 
points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.
Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an
arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any 
balloons in its path. Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

class Solution(object):
    def findMinArrowShots(self, points):
        if not points:
            return 0
        
        points.sort(key=lambda x: x[1])
        arrows = 1
        current_end = points[0][1]
        
        for x_start, x_end in points[1:]:
            if x_start > current_end:
                arrows += 1
                current_end = x_end

        return arrows
OUTPUT:
Input
points =
[[10,16],[2,8],[1,6],[7,12]]
Output
2
Expected
2
